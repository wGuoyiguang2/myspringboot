<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.CommodityOrderMapper" >
    <resultMap id="BaseResultMap" type="com.example.demo.entity.CommodityOrder">
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="is_delete" property="isDelete" jdbcType="INTEGER" />
        <collection property="detailsList"  javaType="java.util.ArrayList" ofType="com.example.demo.entity.CommodityOrderDetail"
                    select="com.example.demo.mapper.CommodityOrderDetailMapper.selectListByOrderId" column="id" >
        <!--column="id" ： 将主表id 列上的值作为参数传进来 给collection了里 com.example.demo.mapper.CommodityOrderDetailMapper.selectList 作为实参
		先查出主表的结果, 然后主表记录数是几 就执行几次 collection 的select,
		javaType和ofType 写不写都行,
		select的值: 对应xml的namespace + 对应xml中的代码片段的id,
		column作为select语句的参数传入,
		   如果只传一个参数id可以简写: column="id";
		   传多个参数： column="{orderId=id,isDelete=is_delete}" ；orderId/isDelete 是定义的变量名, id/is_delete 是主表的字段id/isDelete,将字段值传给collection里的sql
		-->
            <id column="id" property="id" jdbcType="INTEGER" />
            <result column="orderId" property="orderId" jdbcType="INTEGER" />
            <result column="commodity_name" property="commodityName" jdbcType="VARCHAR" />
            <result column="commodity_id" property="commodityId" jdbcType="VARCHAR" />
            <result column="commodity_count" property="commodityCount" jdbcType="INTEGER" />
            <result column="is_delete" property="isDelete" jdbcType="INTEGER" />
        </collection>
    </resultMap>
    <select id="getByOrderId" resultMap="BaseResultMap">
     select id, name, custom_id, is_delete from commodity_order where id = #{id} and is_delete = 0
    </select>

    <!--修改订单主字段 同时批量修改订单明细子数据-->
    <update id="updateOrderAndDetails" parameterType="com.example.demo.entity.Vo.CommodityOrderVo">
        update (
        <foreach collection="toEditDetailsList" item="item" open="(" separator=" union " close=")" index="index">
        select #{item.id} as detail_id, #{item.commodityName} as tmp_commodity_name, #{item.commodityCount} as tmp_commodity_count , #{item.isDelete} as isDelete
        </foreach> as tmp
        inner join commodity_order_detail d on d.id = tmp.detail_id and d.is_delete = 0
        inner join commodity_order o on o.id = d.order_id and o.is_delete = d.is_delete
        and o.id = 1
        ) set o.name            =  #{name},
        d.commodity_name  = tmp.tmp_commodity_name,
        d.commodity_count = tmp.tmp_commodity_count,
        d.is_delete = tmp.isDelete
        where  o.id = #{id}
    </update>
</mapper>